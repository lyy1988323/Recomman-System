Thinking1	什么是近似最近邻查找，常用的方法有哪些

近似最近邻查找：查找离目标数据最近的数据项，并且在牺牲可接受范围内的精度的情况下提高检索效率
常用的方法：1.LSH：局部敏感哈希；2.minHash；3.LSH + minHash

Thinking2	为什么两个集合的minhash值相同的概率等于这两个集合的Jaccard相似度

对于Ci与Cj，对应的行有三种可能：
A类：两列的值都为1；
B类：其中一列的值为0，另一列的值为1；
C类：两列的值都为0.

C类行对于结果计算没有影响，可以删除
P(h(Ci)=h(Cj))=P(删掉C类后，第一行为A类)
=A类行的个数/所有行的个数=a/(a+b)
P(h(Ci)=h(Cj))= Jaccard(Ci,Cj)
所以可以用Ci，Cj的MinHash值相等的概率，对他们的Jaccard相似度进行估计

Thinking3	SimHash在计算文档相似度的作用是怎样的

1、文档SimHash的计算过程
Step1，设置SimHash的位数，比如32位，需要综合考虑存储成本以及数据集的大小
Step2，初始化SimHash，将各位初始化为0 
Step3，提取文本中的特征，比如采用2-Shingles
"the cat sat on the mat"=>{"th", "he", "e ", " c", "ca", "at", "t ", " s", "sa", " o", "on", "n ", " t", " m", "ma"} 
Step4，使用传统的hash函数计算各个word的hashcode
比如："th".hash = -502157718 ，"he".hash = -369049682，…… 
Step5，对各word的hashcode的每一位，如果该位为1，则simhash相应位的值加它的权重（通常是出现的频率）；否则减它的权重 
Step6，计算最后得到的32位的SimHash，如果该位大于0，则设为1；否则设为0

2、如何通过文档的SimHash计算文档之间的相似度
通过SimHash算法得到每篇文档的指纹（fingerprint）
计算两个文档指纹的海明距离
通常2篇文档的Hamming距离在3以内，就认为相似度比较高 => 两篇文档基本相同

Thinking4	为什么YouTube采用期望观看时间作为评估指标			能简要说明原因（10points）
在视频领域，点击率具有一定的欺骗性：很多时候用户点击观看一个视频并不代表用户真的喜欢，满意这个内容
所以采用观看时长这一评估指标：用户观看时间越长，代表越喜欢这个视频